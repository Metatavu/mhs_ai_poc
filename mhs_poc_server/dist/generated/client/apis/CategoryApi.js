/* tslint:disable */
/* eslint-disable */
/**
 * DigiMHS REST API
 * This page is a interactive documentation for REST service fetching best practices for sustainable forest management published by [Tapio](https://tapio.fi/).
 *
 * The version of the OpenAPI document: 2.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime.js';
import { CategoriesGet200ResponseInnerFromJSON, CategoryFromJSON, } from '../models/index.js';
/**
 *
 */
export class CategoryApi extends runtime.BaseAPI {
    /**
     * List of categories in alphabetical order.
     * List all categories
     */
    async categoriesGetRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters['langcode'] != null) {
            queryParameters['langcode'] = requestParameters['langcode'];
        }
        if (requestParameters['from'] != null) {
            queryParameters['from'] = requestParameters['from'];
        }
        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CategoriesGet200ResponseInnerFromJSON));
    }
    /**
     * List of categories in alphabetical order.
     * List all categories
     */
    async categoriesGet(requestParameters = {}, initOverrides) {
        const response = await this.categoriesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Fetch Category by given ID
     */
    async categoriesIdGetRaw(requestParameters, initOverrides) {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling categoriesIdGet().');
        }
        const queryParameters = {};
        if (requestParameters['langcode'] != null) {
            queryParameters['langcode'] = requestParameters['langcode'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CategoryFromJSON));
    }
    /**
     * Fetch Category by given ID
     */
    async categoriesIdGet(requestParameters, initOverrides) {
        const response = await this.categoriesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
/**
 * @export
 */
export const CategoriesGetLangcodeEnum = {
    En: 'en',
    Fi: 'fi',
    Sv: 'sv'
};
/**
 * @export
 */
export const CategoriesIdGetLangcodeEnum = {
    En: 'en',
    Fi: 'fi',
    Sv: 'sv'
};
