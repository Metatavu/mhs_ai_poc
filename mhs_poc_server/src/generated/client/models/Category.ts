/* tslint:disable */
/* eslint-disable */
/**
 * DigiMHS REST API
 * This page is a interactive documentation for REST service fetching best practices for sustainable forest management published by [Tapio](https://tapio.fi/).
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { AvailableTranslations } from './AvailableTranslations.js';
import {
    AvailableTranslationsFromJSON,
    AvailableTranslationsFromJSONTyped,
    AvailableTranslationsToJSON,
} from './AvailableTranslations.js';
import type { FormattedText } from './FormattedText.js';
import {
    FormattedTextFromJSON,
    FormattedTextFromJSONTyped,
    FormattedTextToJSON,
} from './FormattedText.js';
import type { Langcode } from './Langcode.js';
import {
    LangcodeFromJSON,
    LangcodeFromJSONTyped,
    LangcodeToJSON,
} from './Langcode.js';

/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    name?: string;
    /**
     * 
     * @type {AvailableTranslations}
     * @memberof Category
     */
    hasTranslation?: AvailableTranslations;
    /**
     * 
     * @type {FormattedText}
     * @memberof Category
     */
    description?: FormattedText;
    /**
     * 
     * @type {Langcode}
     * @memberof Category
     */
    langcode?: Langcode;
    /**
     * URL pointing to the web presentation of the content.
     * @type {string}
     * @memberof Category
     */
    url?: string;
}

/**
 * Check if a given object implements the Category interface.
 */
export function instanceOfCategory(value: object): boolean {
    return true;
}

export function CategoryFromJSON(json: any): Category {
    return CategoryFromJSONTyped(json, false);
}

export function CategoryFromJSONTyped(json: any, ignoreDiscriminator: boolean): Category {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'hasTranslation': json['hasTranslation'] == null ? undefined : AvailableTranslationsFromJSON(json['hasTranslation']),
        'description': json['description'] == null ? undefined : FormattedTextFromJSON(json['description']),
        'langcode': json['langcode'] == null ? undefined : LangcodeFromJSON(json['langcode']),
        'url': json['url'] == null ? undefined : json['url'],
    };
}

export function CategoryToJSON(value?: Category | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'hasTranslation': AvailableTranslationsToJSON(value['hasTranslation']),
        'description': FormattedTextToJSON(value['description']),
        'langcode': LangcodeToJSON(value['langcode']),
        'url': value['url'],
    };
}

