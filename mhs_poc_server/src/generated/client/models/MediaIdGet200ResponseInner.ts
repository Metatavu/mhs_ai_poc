/* tslint:disable */
/* eslint-disable */
/**
 * DigiMHS REST API
 * This page is a interactive documentation for REST service fetching best practices for sustainable forest management published by [Tapio](https://tapio.fi/).
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { ImageMedia } from './ImageMedia.js';
import {
    instanceOfImageMedia,
    ImageMediaFromJSON,
    ImageMediaFromJSONTyped,
    ImageMediaToJSON,
} from './ImageMedia.js';
import type { RemoteVideoMedia } from './RemoteVideoMedia.js';
import {
    instanceOfRemoteVideoMedia,
    RemoteVideoMediaFromJSON,
    RemoteVideoMediaFromJSONTyped,
    RemoteVideoMediaToJSON,
} from './RemoteVideoMedia.js';

/**
 * @type MediaIdGet200ResponseInner
 * 
 * @export
 */
export type MediaIdGet200ResponseInner = { type: 'image' } & ImageMedia | { type: 'remote_video' } & RemoteVideoMedia;

export function MediaIdGet200ResponseInnerFromJSON(json: any): MediaIdGet200ResponseInner {
    return MediaIdGet200ResponseInnerFromJSONTyped(json, false);
}

export function MediaIdGet200ResponseInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): MediaIdGet200ResponseInner {
    if (json == null) {
        return json;
    }
    switch (json['type']) {
        case 'image':
            return Object.assign({}, ImageMediaFromJSONTyped(json, true), { type: 'image' });
        case 'remote_video':
            return Object.assign({}, RemoteVideoMediaFromJSONTyped(json, true), { type: 'remote_video' });
        default:
            throw new Error(`No variant of MediaIdGet200ResponseInner exists with 'type=${json['type']}'`);
    }
}

export function MediaIdGet200ResponseInnerToJSON(value?: MediaIdGet200ResponseInner | null): any {
    if (value == null) {
        return value;
    }
    switch (value['type']) {
        case 'image':
            return ImageMediaToJSON(value);
        case 'remote_video':
            return RemoteVideoMediaToJSON(value);
        default:
            throw new Error(`No variant of MediaIdGet200ResponseInner exists with 'type=${value['type']}'`);
    }

}

