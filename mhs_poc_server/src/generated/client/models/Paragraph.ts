/* tslint:disable */
/* eslint-disable */
/**
 * DigiMHS REST API
 * This page is a interactive documentation for REST service fetching best practices for sustainable forest management published by [Tapio](https://tapio.fi/).
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { AvailableTranslations } from './AvailableTranslations.js';
import {
    AvailableTranslationsFromJSON,
    AvailableTranslationsFromJSONTyped,
    AvailableTranslationsToJSON,
} from './AvailableTranslations.js';
import type { Langcode } from './Langcode.js';
import {
    LangcodeFromJSON,
    LangcodeFromJSONTyped,
    LangcodeToJSON,
} from './Langcode.js';

/**
 * 
 * @export
 * @interface Paragraph
 */
export interface Paragraph {
    /**
     * 
     * @type {string}
     * @memberof Paragraph
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Paragraph
     */
    type: ParagraphTypeEnum;
    /**
     * 
     * @type {AvailableTranslations}
     * @memberof Paragraph
     */
    hasTranslation?: AvailableTranslations;
    /**
     * 
     * @type {Langcode}
     * @memberof Paragraph
     */
    langcode?: Langcode;
}


/**
 * @export
 */
export const ParagraphTypeEnum = {
    FormattedText: 'formatted_text',
    Media: 'media',
    Table: 'table'
} as const;
export type ParagraphTypeEnum = typeof ParagraphTypeEnum[keyof typeof ParagraphTypeEnum];


/**
 * Check if a given object implements the Paragraph interface.
 */
export function instanceOfParagraph(value: object): boolean {
    if (!('type' in value)) return false;
    return true;
}

export function ParagraphFromJSON(json: any): Paragraph {
    return ParagraphFromJSONTyped(json, false);
}

export function ParagraphFromJSONTyped(json: any, ignoreDiscriminator: boolean): Paragraph {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'type': json['type'],
        'hasTranslation': json['hasTranslation'] == null ? undefined : AvailableTranslationsFromJSON(json['hasTranslation']),
        'langcode': json['langcode'] == null ? undefined : LangcodeFromJSON(json['langcode']),
    };
}

export function ParagraphToJSON(value?: Paragraph | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'type': value['type'],
        'hasTranslation': AvailableTranslationsToJSON(value['hasTranslation']),
        'langcode': LangcodeToJSON(value['langcode']),
    };
}

