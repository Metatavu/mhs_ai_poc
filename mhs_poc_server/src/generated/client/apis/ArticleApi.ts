/* tslint:disable */
/* eslint-disable */
/**
 * DigiMHS REST API
 * This page is a interactive documentation for REST service fetching best practices for sustainable forest management published by [Tapio](https://tapio.fi/).
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  Article,
  ArticlesGet200ResponseInner,
  ArticlesGet400Response,
  ArticlesGet404Response,
  ArticlesGet500Response,
} from '../models/index.js';
import {
    ArticleFromJSON,
    ArticleToJSON,
    ArticlesGet200ResponseInnerFromJSON,
    ArticlesGet200ResponseInnerToJSON,
    ArticlesGet400ResponseFromJSON,
    ArticlesGet400ResponseToJSON,
    ArticlesGet404ResponseFromJSON,
    ArticlesGet404ResponseToJSON,
    ArticlesGet500ResponseFromJSON,
    ArticlesGet500ResponseToJSON,
} from '../models/index.js';

export interface ArticlesGetRequest {
    langcode?: ArticlesGetLangcodeEnum;
    from?: number;
    size?: number;
}

export interface ArticlesIdGetRequest {
    id: Array<string>;
    langcode?: ArticlesIdGetLangcodeEnum;
}

/**
 * 
 */
export class ArticleApi extends runtime.BaseAPI {

    /**
     * List of articles in alphabetical order.
     * List all articles
     */
    async articlesGetRaw(requestParameters: ArticlesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ArticlesGet200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['langcode'] != null) {
            queryParameters['langcode'] = requestParameters['langcode'];
        }

        if (requestParameters['from'] != null) {
            queryParameters['from'] = requestParameters['from'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/articles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ArticlesGet200ResponseInnerFromJSON));
    }

    /**
     * List of articles in alphabetical order.
     * List all articles
     */
    async articlesGet(requestParameters: ArticlesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ArticlesGet200ResponseInner>> {
        const response = await this.articlesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch Article content by given ID
     */
    async articlesIdGetRaw(requestParameters: ArticlesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Article>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling articlesIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['langcode'] != null) {
            queryParameters['langcode'] = requestParameters['langcode'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/articles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ArticleFromJSON));
    }

    /**
     * Fetch Article content by given ID
     */
    async articlesIdGet(requestParameters: ArticlesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Article>> {
        const response = await this.articlesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ArticlesGetLangcodeEnum = {
    En: 'en',
    Fi: 'fi',
    Sv: 'sv'
} as const;
export type ArticlesGetLangcodeEnum = typeof ArticlesGetLangcodeEnum[keyof typeof ArticlesGetLangcodeEnum];
/**
 * @export
 */
export const ArticlesIdGetLangcodeEnum = {
    En: 'en',
    Fi: 'fi',
    Sv: 'sv'
} as const;
export type ArticlesIdGetLangcodeEnum = typeof ArticlesIdGetLangcodeEnum[keyof typeof ArticlesIdGetLangcodeEnum];
